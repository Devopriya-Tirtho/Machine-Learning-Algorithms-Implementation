# -*- coding: utf-8 -*-
"""Copy of PRLAB_ASM3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hlTRWdk8ZPRAQ1eA5VLKRDZHjuFayedQ
"""

import pandas as pd #importing pandas library
import numpy as np #inporting numpy library
import matplotlib.pyplot as plt #importing matplotlib library

test_data = pd.read_csv('test.txt', sep=",", header=None) #Reading File Named 'train.txt' with Separator ' '
test_data.columns = ["x1", "y1"] #Giving Column Names

test_data

#Declaring Parameters
prior1=0.5
prior2=0.5
mu1=np.array([0,0])
mu2=np.array([2,2])
sigma1=np.array([[0.25,0.3],[0.3,1]])
sigma2=np.array([[0.5,0],[0,0.5]])

print(mu1)
print(mu2)
print(sigma1)
print(sigma2)

det_sigma1= np.linalg.det(sigma1)
det_sigma2= np.linalg.det(sigma2)

print(det_sigma1)
print(det_sigma2)

from numpy.linalg import inv
inv_sigma1 = inv(sigma1)
inv_sigma2 = inv(sigma2)

print(inv_sigma1)
print(inv_sigma2)

b=test_data.shape #Finding The Shape of Train Dataset
print(b[0]) #Printing the  Row Numbers
RowNumber=b[0] #Assigning Row Numbers in RowNumber
PI = 3.14159

normal_dist_1=[]
normal_dist_2=[]
#Defining 4 Lists for Train Class 1 and Class 2
for i in range(0,RowNumber):
    test_datapoint=np.array([test_data.at[i,'x1'],test_data.at[i,'y1']])
    normal_dist_1.append((1/(2*PI*np.sqrt(det_sigma1)))*(np.exp(-0.5*(np.dot((test_datapoint - mu1).transpose(), np.dot(inv_sigma1,(test_datapoint - mu1)))))))
    normal_dist_2.append((1/(2*PI*np.sqrt(det_sigma2)))*(np.exp(-0.5*(np.dot((test_datapoint - mu2).transpose(), np.dot(inv_sigma2,(test_datapoint - mu2)))))))

posterior_1 = [i * prior1 for i in normal_dist_1]
posterior_2 = [i * prior2 for i in normal_dist_2]

print(posterior_1)
print(posterior_2)

#Testing Class
test_class=[]
for i in range(6):
  if (posterior_1[i]>posterior_2[i]):
    test_class.append(1)
  else:
    test_class.append(2)
test_data['class']=test_class

test_data

plot_data = pd.read_csv('plot.txt', sep=" ", header=None) #Reading File Named 'train.txt' with Separator ' '
plot_data.columns = ["x1", "y1"] #Giving Column Names

plot_data

c=plot_data.shape #Finding The Shape of Train Dataset
print(c[0]) #Printing the  Row Numbers
RowNumber=c[0] #Assigning Row Numbers in RowNumber
PI = 3.14159

coordinates=[]

#Defining 4 Lists for Train Class 1 and Class 2
for i in range(0,RowNumber):
    test_datapoint=np.array([plot_data.at[i,'x1'],plot_data.at[i,'y1']])
    coordinates.append(np.sqrt(det_sigma1/det_sigma2)*(np.exp((-
                        np.dot((test_datapoint - mu1).transpose(), 
                        np.dot(inv_sigma1,(test_datapoint - mu1))))+
                        (np.dot((test_datapoint - mu2).transpose()
                        ,np.dot(inv_sigma2,(test_datapoint - mu2)))))))

Yd=np.array(coordinates)
X=plot_data['x1']
Xd=np.array(X)

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from scipy.stats import multivariate_normal
from mpl_toolkits.mplot3d import Axes3D


x1=np.array(test_data['x1'])
y1=np.array(test_data['y1'])

#Parameters to set
mu_x = 0
variance_x = 3

mu_y = 0
variance_y = 15

#Create grid and multivariate normal
x = np.linspace(-6,6,100)
y = np.linspace(-6,6,100)
X, Y = np.meshgrid(x,y)
pos = np.empty(X.shape + (2,))
pos[:, :, 0] = X; pos[:, :, 1] = Y
rv = multivariate_normal([0, 0], [[.25, .3], [.3, 1]])
rx = multivariate_normal([2, 2], [[.5, 0], [0, .5]])
#Make a 3D plot

fig = plt.figure(figsize=(8,8))
ax= fig.add_subplot(111, projection="3d")





ax.plot_surface(X, Y, rv.pdf(pos), cmap="viridis", lw=0.5, rstride=1, cstride=1, alpha=0.5)

ax.plot_surface(X, Y, rx.pdf(pos), cmap="cividis", lw=0.5, rstride=1, cstride=1, alpha=0.5)

cset1 = ax.contour(X, Y, rv.pdf(pos), zdir='z', offset=0, cmap=cm.coolwarm)

cset2 = ax.contour(X, Y, rx.pdf(pos), zdir='z', offset=0, cmap=cm.coolwarm)

b=test_data.shape #Finding The Shape of Train Dataset
print(b[0]) #Printing the  Row Numbers
RowNumber=b[0] #Assigning Row Numbers in RowNumber

class_1_x=[]
class_1_y=[]
class_2_x=[]
class_2_y=[]
for i in range(0,RowNumber):
  if (test_data.at[i,'class']==1):

    class_1_x.append(test_data.at[i,'x1'])
    class_1_y.append(test_data.at[i,'y1'])

  else:
    class_2_x.append(test_data.at[i,'x1'])
    class_2_y.append(test_data.at[i,'y1'])


class_1_x=np.array(class_1_x)
class_1_y=np.array(class_1_y)
class_2_x=np.array(class_2_x)
class_2_y=np.array(class_2_y)

ax.plot3D(class_1_x,class_1_y,-0.2,'b*', markersize=10,label='Train Class 1')
ax.plot3D(class_2_x,class_2_y,-0.2, 'r*', markersize=10,label='Train Class 2')


ax.text(class_1_x[0], class_1_y[0],-0.2, "R1", size=8,
 color='k') 
ax.text(class_1_x[1], class_1_y[1],-0.2, "R1", size=8, 
 color='k') 
ax.text(class_1_x[2], class_1_y[2],-0.2, "R1", size=8, 
 color='k') 
ax.text(class_2_x[0], class_2_y[0],-0.2, "R2", size=8, 
 color='k') 
ax.text(class_2_x[1], class_2_y[1],-0.2, "R2", size=8,
 color='k') 
ax.text(class_2_x[2], class_2_y[2],-0.2, "R2", size=8, 
 color='k') 

ax.plot(Xd,Yd,0,color='black')
ax.set_xlim(-6, 6)
ax.set_ylim(-6, 6)
ax.set_zlim(-0.2, 0.3)

ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
#ax.set_zlabel('Probability Density')
plt.show()

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal
from mpl_toolkits.mplot3d import Axes3D


x1=np.array(test_data['x1'])
y1=np.array(test_data['y1'])

#Parameters to set
mu_x = 0
variance_x = 3

mu_y = 0
variance_y = 15

#Create grid and multivariate normal
x = np.linspace(-6,6,100)
y = np.linspace(-6,6,100)
X, Y = np.meshgrid(x,y)
pos = np.empty(X.shape + (2,))
pos[:, :, 0] = X; pos[:, :, 1] = Y
rv = multivariate_normal([0, 0], [[.25, .3], [.3, 1]])
rx = multivariate_normal([2, 2], [[.5, 0], [0, .5]])
#Make a 3D plot

fig = plt.figure(figsize=(8,8))
ax= fig.add_subplot(111, projection="3d")

ax.plot_surface(X, Y, rv.pdf(pos), cmap="viridis", lw=0.5, rstride=1, cstride=1, alpha=0.5)

ax.plot_surface(X, Y, rx.pdf(pos), cmap="cividis", lw=0.5, rstride=1, cstride=1, alpha=0.5)

cset1 = ax.contour(X, Y, rv.pdf(pos), zdir='z', offset=-0.25, cmap=cm.coolwarm)

cset2 = ax.contour(X, Y, rx.pdf(pos), zdir='z', offset=-0.25, cmap=cm.coolwarm)

ax.plot(class_1_x,class_1_y ,'b*', markersize=10,label='Train Class 1')
ax.plot(class_2_x,class_2_y, 'r*', markersize=10,label='Train Class 2')


ax.text(class_1_x[0], class_1_y[0],0, "R1", size=8,
 color='k') 
ax.text(class_1_x[1], class_1_y[1],0, "R1", size=8, 
 color='k') 
ax.text(class_1_x[2], class_1_y[2],0, "R1", size=8, 
 color='k') 
ax.text(class_2_x[0], class_2_y[0],0,"R2", size=8, 
 color='k') 
ax.text(class_2_x[1], class_2_y[1],0, "R2", size=8,
 color='k') 
ax.text(class_2_x[2], class_2_y[2],0, "R2", size=8, 
 color='k') 


ax.set_xlim(-6, 6)
ax.set_ylim(-6, 6)
ax.set_zlim(-0.2, 0.3)

ax.set_xlabel('X axis')
ax.set_ylabel('Y axis')
ax.set_zlabel('Probability Density')
plt.show()

Xd

Yd

